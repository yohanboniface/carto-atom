#!/usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    _ = require('underscore')._,
    versions = require('mapnik-reference').versions,
    load = require('mapnik-reference').load,
    latest = versions[versions.length - 1],
    ref = load(latest);


var color_names = _.keys(ref.colors);
var property_names = _.reduce(ref.symbolizers, function (memo, s) {
    var props = _.values(_.pick(_.values(s), 'css'));
    memo = memo.concat(_.reduce(s, function (m, t) {if(t.css) {m=m.concat([t.css]);} return m;}, []));
    return memo;
}, []);
var keyword_names = _.uniq(_.reduce(ref.symbolizers,
    function(memo, s) {
    for (var i in s) {
        if (_.isArray(s[i].type)) {
            memo = memo.concat(s[i].type);
        }
    }
    return memo;
}, []));
keyword_names.push('true');
keyword_names.push('false');
// Longuer ones before, so "dst" doesn't match before "dst-over"
keyword_names.sort(function (a, b) {
    return b.length - a.length;
});

var template = JSON.parse(fs.readFileSync(path.join(__dirname, 'template.json'), 'utf-8'));
template.patterns.push({
    match: "\\b(" + color_names.join('|') + ")\\b",
    name: "constant.color.w3c-standard-color-name.mss"
});
template.patterns.push({
    match: "\\b(" + keyword_names.join('|') + ")\\b",
    name: "support.concat.property-value.mss"
});
template.patterns.unshift({
    captures: {
        "1": {
            name: "entity.other.attachment.mss"
        },
        "2": {
            name: "support.type.property-name.mss"
        }
      },
      match: "\\b([a-zA-Z0-9_]+/)?(" + property_names.join('|') + ")(?=\\s*:)"
    }
)
// template = template({
//     color_names: color_names.filter(function(a) { return a; }).join('|'),
//     keyword_names: keyword_names.filter(function(a) { return a; }).join('|'),
//     property_names: property_names.filter(function(a) { return a; }).join('|')
// });
fs.writeFile('grammars/carto.json', JSON.stringify(template), function(err) {
    if (err) throw err;
    console.log('carto.json updated');
});
